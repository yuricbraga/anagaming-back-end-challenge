x-rabbitmq-variables: &rabbitmq-variables # Variaveis que ser√£o usadas pelos dois servicos. Devem coincidir com a configuracao do rabbitmq.
  RABBITMQ_USERNAME: username
  RABBITMQ_PASSWORD: password
  RABBITMQ_URI: localhost
  RABBITMQ_PORT: 5672
  RABBITMQ_QUEUE_NAME: queue

services:
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user # configurar usuario
      RABBITMQ_DEFAULT_PASS: pass # configurar senha
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  mongodb:
    image: mongo:8.0.12
    container_name: mongodb
    restart: always
    ports:
      -  "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: user # configurar usuario
      MONGO_INITDB_ROOT_PASSWORD: pass # configurar senha
    volumes:
      - mongo-data:/data/db:z
      - mongo-config:/data/configdb:z
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 30s
      retries: 3

  receive:
    container_name: receive
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    build: 
      context: ./receive
      target: prod
    environment:
      <<: *rabbitmq-variables
      NODE_ENV: production
    ports:
      - "3000:3000"

  store:
    container_name: store
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    build: 
      context: ./store
      target: prod
    environment:
      <<: *rabbitmq-variables
      NODE_ENV: production
      MONGODB_USER: user # configurar usuario
      MONGODB_PASS: pass # configurar senha
    ports:
      - "3001:3001"

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
